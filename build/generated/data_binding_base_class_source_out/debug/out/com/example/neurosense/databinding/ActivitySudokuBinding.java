// Generated by view binder compiler. Do not edit!
package com.example.neurosense.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.gridlayout.widget.GridLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.neurosense.R;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySudokuBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView TitleSudoku;

  @NonNull
  public final Button button1;

  @NonNull
  public final Button button2;

  @NonNull
  public final Button button3;

  @NonNull
  public final Button button4;

  @NonNull
  public final Button button5;

  @NonNull
  public final Button button6;

  @NonNull
  public final Button button7;

  @NonNull
  public final Button button8;

  @NonNull
  public final Button button9;

  @NonNull
  public final Button endGame;

  @NonNull
  public final TextView gameScore;

  @NonNull
  public final GridLayout mainGridLayout;

  @NonNull
  public final ConstraintLayout numberButtons;

  @NonNull
  public final Button pausePlay;

  @NonNull
  public final LinearLayout scoreContainer;

  @NonNull
  public final TextInputEditText scoreCounter;

  @NonNull
  public final ConstraintLayout sudokuGrid;

  @NonNull
  public final RecyclerView sudokuGridRecyclerView;

  private ActivitySudokuBinding(@NonNull ConstraintLayout rootView, @NonNull TextView TitleSudoku,
      @NonNull Button button1, @NonNull Button button2, @NonNull Button button3,
      @NonNull Button button4, @NonNull Button button5, @NonNull Button button6,
      @NonNull Button button7, @NonNull Button button8, @NonNull Button button9,
      @NonNull Button endGame, @NonNull TextView gameScore, @NonNull GridLayout mainGridLayout,
      @NonNull ConstraintLayout numberButtons, @NonNull Button pausePlay,
      @NonNull LinearLayout scoreContainer, @NonNull TextInputEditText scoreCounter,
      @NonNull ConstraintLayout sudokuGrid, @NonNull RecyclerView sudokuGridRecyclerView) {
    this.rootView = rootView;
    this.TitleSudoku = TitleSudoku;
    this.button1 = button1;
    this.button2 = button2;
    this.button3 = button3;
    this.button4 = button4;
    this.button5 = button5;
    this.button6 = button6;
    this.button7 = button7;
    this.button8 = button8;
    this.button9 = button9;
    this.endGame = endGame;
    this.gameScore = gameScore;
    this.mainGridLayout = mainGridLayout;
    this.numberButtons = numberButtons;
    this.pausePlay = pausePlay;
    this.scoreContainer = scoreContainer;
    this.scoreCounter = scoreCounter;
    this.sudokuGrid = sudokuGrid;
    this.sudokuGridRecyclerView = sudokuGridRecyclerView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySudokuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySudokuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_sudoku, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySudokuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TitleSudoku;
      TextView TitleSudoku = ViewBindings.findChildViewById(rootView, id);
      if (TitleSudoku == null) {
        break missingId;
      }

      id = R.id.button_1;
      Button button1 = ViewBindings.findChildViewById(rootView, id);
      if (button1 == null) {
        break missingId;
      }

      id = R.id.button_2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.button_3;
      Button button3 = ViewBindings.findChildViewById(rootView, id);
      if (button3 == null) {
        break missingId;
      }

      id = R.id.button_4;
      Button button4 = ViewBindings.findChildViewById(rootView, id);
      if (button4 == null) {
        break missingId;
      }

      id = R.id.button_5;
      Button button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.button_6;
      Button button6 = ViewBindings.findChildViewById(rootView, id);
      if (button6 == null) {
        break missingId;
      }

      id = R.id.button_7;
      Button button7 = ViewBindings.findChildViewById(rootView, id);
      if (button7 == null) {
        break missingId;
      }

      id = R.id.button_8;
      Button button8 = ViewBindings.findChildViewById(rootView, id);
      if (button8 == null) {
        break missingId;
      }

      id = R.id.button_9;
      Button button9 = ViewBindings.findChildViewById(rootView, id);
      if (button9 == null) {
        break missingId;
      }

      id = R.id.end_game;
      Button endGame = ViewBindings.findChildViewById(rootView, id);
      if (endGame == null) {
        break missingId;
      }

      id = R.id.game_score;
      TextView gameScore = ViewBindings.findChildViewById(rootView, id);
      if (gameScore == null) {
        break missingId;
      }

      id = R.id.main_grid_layout;
      GridLayout mainGridLayout = ViewBindings.findChildViewById(rootView, id);
      if (mainGridLayout == null) {
        break missingId;
      }

      id = R.id.number_buttons;
      ConstraintLayout numberButtons = ViewBindings.findChildViewById(rootView, id);
      if (numberButtons == null) {
        break missingId;
      }

      id = R.id.pause_play;
      Button pausePlay = ViewBindings.findChildViewById(rootView, id);
      if (pausePlay == null) {
        break missingId;
      }

      id = R.id.score_container;
      LinearLayout scoreContainer = ViewBindings.findChildViewById(rootView, id);
      if (scoreContainer == null) {
        break missingId;
      }

      id = R.id.score_counter;
      TextInputEditText scoreCounter = ViewBindings.findChildViewById(rootView, id);
      if (scoreCounter == null) {
        break missingId;
      }

      ConstraintLayout sudokuGrid = (ConstraintLayout) rootView;

      id = R.id.sudoku_grid_recycler_view;
      RecyclerView sudokuGridRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (sudokuGridRecyclerView == null) {
        break missingId;
      }

      return new ActivitySudokuBinding((ConstraintLayout) rootView, TitleSudoku, button1, button2,
          button3, button4, button5, button6, button7, button8, button9, endGame, gameScore,
          mainGridLayout, numberButtons, pausePlay, scoreContainer, scoreCounter, sudokuGrid,
          sudokuGridRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
